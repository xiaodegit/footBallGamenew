{"version":3,"sources":["file:///D:/cocosProject/footBallGame/node_modules/engine.io-parser/build/esm/decodePacket.js"],"names":["ERROR_PACKET","PACKET_TYPES_REVERSE","decodePacket","encodedPacket","binaryType","type","data","mapBinary","charAt","buffer","Buffer","from","substring","length","ArrayBuffer","isBuffer","slice","byteOffset","byteLength"],"mappings":";;;;;;AAASA,MAAAA,Y,gBAAAA,Y;AAAcC,MAAAA,oB,gBAAAA,oB;;;8BACVC,Y,GAAe,CAACC,aAAD,EAAgBC,UAAhB,KAA+B;AACvD,YAAI,OAAOD,aAAP,KAAyB,QAA7B,EAAuC;AACnC,iBAAO;AACHE,YAAAA,IAAI,EAAE,SADH;AAEHC,YAAAA,IAAI,EAAEC,SAAS,CAACJ,aAAD,EAAgBC,UAAhB;AAFZ,WAAP;AAIH;;AACD,cAAMC,IAAI,GAAGF,aAAa,CAACK,MAAd,CAAqB,CAArB,CAAb;;AACA,YAAIH,IAAI,KAAK,GAAb,EAAkB;AACd,gBAAMI,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYR,aAAa,CAACS,SAAd,CAAwB,CAAxB,CAAZ,EAAwC,QAAxC,CAAf;AACA,iBAAO;AACHP,YAAAA,IAAI,EAAE,SADH;AAEHC,YAAAA,IAAI,EAAEC,SAAS,CAACE,MAAD,EAASL,UAAT;AAFZ,WAAP;AAIH;;AACD,YAAI,CAACH,oBAAoB,CAACI,IAAD,CAAzB,EAAiC;AAC7B,iBAAOL,YAAP;AACH;;AACD,eAAOG,aAAa,CAACU,MAAd,GAAuB,CAAvB,GACD;AACER,UAAAA,IAAI,EAAEJ,oBAAoB,CAACI,IAAD,CAD5B;AAEEC,UAAAA,IAAI,EAAEH,aAAa,CAACS,SAAd,CAAwB,CAAxB;AAFR,SADC,GAKD;AACEP,UAAAA,IAAI,EAAEJ,oBAAoB,CAACI,IAAD;AAD5B,SALN;AAQH,O;;AACKE,MAAAA,S,GAAY,CAACD,IAAD,EAAOF,UAAP,KAAsB;AACpC,gBAAQA,UAAR;AACI,eAAK,aAAL;AACI,gBAAIE,IAAI,YAAYQ,WAApB,EAAiC;AAC7B;AACA,qBAAOR,IAAP;AACH,aAHD,MAIK,IAAII,MAAM,CAACK,QAAP,CAAgBT,IAAhB,CAAJ,EAA2B;AAC5B;AACA,qBAAOA,IAAI,CAACG,MAAL,CAAYO,KAAZ,CAAkBV,IAAI,CAACW,UAAvB,EAAmCX,IAAI,CAACW,UAAL,GAAkBX,IAAI,CAACY,UAA1D,CAAP;AACH,aAHI,MAIA;AACD;AACA,qBAAOZ,IAAI,CAACG,MAAZ;AACH;;AACL,eAAK,YAAL;AACA;AACI,gBAAIC,MAAM,CAACK,QAAP,CAAgBT,IAAhB,CAAJ,EAA2B;AACvB;AACA,qBAAOA,IAAP;AACH,aAHD,MAIK;AACD;AACA,qBAAOI,MAAM,CAACC,IAAP,CAAYL,IAAZ,CAAP;AACH;;AAvBT;AAyBH,O","sourcesContent":["import { ERROR_PACKET, PACKET_TYPES_REVERSE, } from \"./commons.js\";\nexport const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType),\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        const buffer = Buffer.from(encodedPacket.substring(1), \"base64\");\n        return {\n            type: \"message\",\n            data: mapBinary(buffer, binaryType),\n        };\n    }\n    if (!PACKET_TYPES_REVERSE[type]) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1),\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type],\n        };\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"arraybuffer\":\n            if (data instanceof ArrayBuffer) {\n                // from WebSocket & binaryType \"arraybuffer\"\n                return data;\n            }\n            else if (Buffer.isBuffer(data)) {\n                // from HTTP long-polling\n                return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n        case \"nodebuffer\":\n        default:\n            if (Buffer.isBuffer(data)) {\n                // from HTTP long-polling or WebSocket & binaryType \"nodebuffer\" (default)\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return Buffer.from(data);\n            }\n    }\n};\n"]}