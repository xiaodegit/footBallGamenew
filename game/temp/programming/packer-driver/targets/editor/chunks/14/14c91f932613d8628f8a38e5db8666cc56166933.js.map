{"version":3,"sources":["file:///D:/cocosProject/footBallGame/game/node_modules/socket.io-client/build/esm/manager.js"],"names":["Manager","Engine","Socket","installTimerFunctions","nextTick","parser","on","Backoff","Emitter","constructor","uri","opts","_a","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","skipReconnect","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","openSubDestroy","onopen","onError","err","cleanup","emitReserved","errorSub","timer","setTimeoutFn","Error","close","autoUnref","unref","push","clearTimeoutFn","connect","onping","bind","ondata","onerror","onclose","ondecoded","data","add","e","packet","nsp","active","_destroy","Object","keys","_close","_packet","encodedPackets","encode","i","write","options","forEach","subDestroy","destroy","disconnect","reason","description","reset","delay","duration","onreconnect","attempt"],"mappings":"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","sourcesContent":["import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n            this.skipReconnect = true;\n        }\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), \n        // @ts-ignore\n        on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n"]}