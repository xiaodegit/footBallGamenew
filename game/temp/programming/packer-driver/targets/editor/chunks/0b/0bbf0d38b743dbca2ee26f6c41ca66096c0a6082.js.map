{"version":3,"sources":["file:///D:/cocosProject/footBallGame/node_modules/engine.io-client/build/esm/transports/polling.js"],"names":["Polling","Transport","randomString","encodePayload","decodePayload","constructor","arguments","_polling","name","doOpen","_poll","pause","onPause","readyState","writable","total","once","doPoll","emitReserved","onData","data","callback","packet","type","onOpen","onClose","description","onPacket","socket","binaryType","forEach","doClose","close","write","packets","doWrite","uri","schema","opts","secure","query","timestampRequests","timestampParam","supportsBinary","sid","b64","createUri"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\n"]}