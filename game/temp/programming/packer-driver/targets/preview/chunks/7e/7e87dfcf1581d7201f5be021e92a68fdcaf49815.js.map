{"version":3,"sources":["file:///D:/cocosProject/footBallGame/game/assets/controllers/stickControls/onTouchController/onTouchStick.ts"],"names":["_decorator","Component","Layers","Node","UITransform","Vec3","PlayerController","ccclass","property","onTouchStick","currentPosition","isSingleTouch","playerController","isMoveBoolean","start","node","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","onTouchCancel","setSiblingIndex","parent","children","length","layer","Enum","UI_2D","player","getComponent","update","dt","updatePlayerMovement","event","singleTouch","active","setPositionToTouch","updateStickMove","setPosition","targetNode","touchLocation","getUILocation","uiPoint","x","y","parentUITransform","localPosition","convertToNodeSpaceAR","handle","position","maxX","minX","clampedX","Math","min","max","fixedY","z","moveSpeed","addMovement","touches","getTouches"],"mappings":"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","sourcesContent":["import { _decorator, Camera, Component, EventTouch, Layers, log, Node, UITransform, Vec3 } from 'cc';\r\nimport { PlayerController } from '../../PlayerController';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('onTouchStick')\r\nexport class onTouchStick extends Component {\r\n    @property(Node)\r\n    player: Node;\r\n    currentPosition: Vec3;\r\n    private isSingleTouch: boolean = false;\r\n    playerController: PlayerController;\r\n    isMoveBoolean: Boolean = false;;\r\n    start() {\r\n        // 注册触摸事件监听\r\n        this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\r\n\r\n        // 设置节点层级和层\r\n        this.node.setSiblingIndex(this.node.parent.children.length - 1);\r\n        this.node.layer = Layers.Enum.UI_2D;\r\n\r\n        this.playerController = this.player.getComponent(PlayerController);\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        if (this.isMoveBoolean) {\r\n            this.updatePlayerMovement();\r\n        }\r\n    }\r\n\r\n    onTouchStart(event: EventTouch) {\r\n        this.singleTouch(event);\r\n        this.isMoveBoolean = true;\r\n\r\n        // 激活操纵杆背景节点\r\n        this.node.children[0].active = true;\r\n\r\n        // 将操纵杆背景节点移动到触摸位置\r\n        this.setPositionToTouch(event, this.node.children[0]);\r\n    }\r\n\r\n    onTouchMove(event: EventTouch) {\r\n        if (this.isSingleTouch) {\r\n            // 更新操纵杆手柄的位置\r\n            this.setPositionToTouch(event, this.node.children[0].children[0]);\r\n            //限制摇杆操作，模拟真实摇杆\r\n            this.updateStickMove();\r\n        }\r\n    }\r\n\r\n    onTouchEnd(event: EventTouch) {\r\n        this.node.children[0].children[0].setPosition(new Vec3(0,0,0))\r\n        // 隐藏操纵杆背景节点\r\n        this.node.children[0].active = false;\r\n        this.isMoveBoolean = false;\r\n\r\n        this.isSingleTouch = false;\r\n    }\r\n\r\n    onTouchCancel(event: EventTouch) {\r\n        // 触摸取消时，与触摸结束相同的处理\r\n        this.onTouchEnd(event);\r\n    }\r\n\r\n    setPositionToTouch(event: EventTouch, targetNode: Node) {\r\n        // 获取手指触摸位置的 UI 坐标\r\n        const touchLocation = event.getUILocation();\r\n\r\n        // 将 UI 坐标转换为世界坐标\r\n        const uiPoint = new Vec3(touchLocation.x, touchLocation.y, 0);\r\n\r\n        // 将世界坐标转换为操纵杆父节点的局部坐标\r\n        const parentUITransform = targetNode.parent?.getComponent(UITransform);\r\n        if (!parentUITransform) {\r\n            return;\r\n        }\r\n\r\n        const localPosition = parentUITransform.convertToNodeSpaceAR(uiPoint);\r\n\r\n        // 更新节点的局部位置\r\n        targetNode.setPosition(localPosition);\r\n    }\r\n\r\n\r\n\r\n    updateStickMove() {\r\n        const handle = this.node.children[0].children[0];\r\n        if (!handle) return;\r\n\r\n        // 获取手柄的当前局部坐标\r\n        this.currentPosition = handle.position;\r\n\r\n        // 限制 X 轴的范围在 -100 到 100 之间\r\n        const maxX = 100;\r\n        const minX = -100;\r\n\r\n        // 限制 X 轴的位置\r\n        const clampedX = Math.min(Math.max(this.currentPosition.x, minX), maxX);\r\n\r\n        // Y 轴保持不变（如果需要固定在 0，可以将 currentPosition.y 设置为 0）\r\n        const fixedY = 0;\r\n\r\n        // 更新手柄的位置，只改变 X 轴，保持 Y 和 Z 轴不变\r\n        handle.setPosition(new Vec3(clampedX, fixedY, this.currentPosition.z));\r\n\r\n    }\r\n\r\n    updatePlayerMovement() {\r\n        if (!this.currentPosition) return;\r\n        let moveSpeed = this.currentPosition.x / 20;\r\n        this.playerController.addMovement(moveSpeed);\r\n\r\n    }\r\n\r\n    // 单点触摸\r\n    singleTouch(event: EventTouch) {\r\n        // 获取当前屏幕上所有触摸点\r\n        const touches = event.getTouches();\r\n\r\n        // 只有当触摸点数量为1时，才标识为单点触摸\r\n        if (touches.length === 1) {\r\n            this.isSingleTouch = true;\r\n        } else {\r\n            this.isSingleTouch = false;\r\n        }\r\n    }\r\n}\r\n"]}