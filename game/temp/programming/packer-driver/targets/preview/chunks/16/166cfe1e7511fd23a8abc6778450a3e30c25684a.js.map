{"version":3,"sources":["file:///D:/cocosProject/footBallGame/node_modules/engine.io-client/build/esm/globals.node.js"],"names":["CookieJar","createCookieJar","parse","setCookieString","parts","split","i","indexOf","name","substring","trim","length","value","charCodeAt","slice","cookie","j","subParts","key","expires","Date","expiration","setUTCSeconds","getUTCSeconds","parseInt","nextTick","process","globalThisShim","global","defaultBinaryType","constructor","_cookies","Map","parseCookies","values","forEach","parsed","set","cookies","now","_a","getTime","delete","entries","addCookies","xhr","push","setDisableHeaderCheck","setRequestHeader","join","appendCookies","headers","append"],"mappings":"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","sourcesContent":["export const nextTick = process.nextTick;\nexport const globalThisShim = global;\nexport const defaultBinaryType = \"nodebuffer\";\nexport function createCookieJar() {\n    return new CookieJar();\n}\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie\n */\nexport function parse(setCookieString) {\n    const parts = setCookieString.split(\"; \");\n    const i = parts[0].indexOf(\"=\");\n    if (i === -1) {\n        return;\n    }\n    const name = parts[0].substring(0, i).trim();\n    if (!name.length) {\n        return;\n    }\n    let value = parts[0].substring(i + 1).trim();\n    if (value.charCodeAt(0) === 0x22) {\n        // remove double quotes\n        value = value.slice(1, -1);\n    }\n    const cookie = {\n        name,\n        value,\n    };\n    for (let j = 1; j < parts.length; j++) {\n        const subParts = parts[j].split(\"=\");\n        if (subParts.length !== 2) {\n            continue;\n        }\n        const key = subParts[0].trim();\n        const value = subParts[1].trim();\n        switch (key) {\n            case \"Expires\":\n                cookie.expires = new Date(value);\n                break;\n            case \"Max-Age\":\n                const expiration = new Date();\n                expiration.setUTCSeconds(expiration.getUTCSeconds() + parseInt(value, 10));\n                cookie.expires = expiration;\n                break;\n            default:\n            // ignore other keys\n        }\n    }\n    return cookie;\n}\nexport class CookieJar {\n    constructor() {\n        this._cookies = new Map();\n    }\n    parseCookies(values) {\n        if (!values) {\n            return;\n        }\n        values.forEach((value) => {\n            const parsed = parse(value);\n            if (parsed) {\n                this._cookies.set(parsed.name, parsed);\n            }\n        });\n    }\n    get cookies() {\n        const now = Date.now();\n        this._cookies.forEach((cookie, name) => {\n            var _a;\n            if (((_a = cookie.expires) === null || _a === void 0 ? void 0 : _a.getTime()) < now) {\n                this._cookies.delete(name);\n            }\n        });\n        return this._cookies.entries();\n    }\n    addCookies(xhr) {\n        const cookies = [];\n        for (const [name, cookie] of this.cookies) {\n            cookies.push(`${name}=${cookie.value}`);\n        }\n        if (cookies.length) {\n            xhr.setDisableHeaderCheck(true);\n            xhr.setRequestHeader(\"cookie\", cookies.join(\"; \"));\n        }\n    }\n    appendCookies(headers) {\n        for (const [name, cookie] of this.cookies) {\n            headers.append(\"cookie\", `${name}=${cookie.value}`);\n        }\n    }\n}\n"]}