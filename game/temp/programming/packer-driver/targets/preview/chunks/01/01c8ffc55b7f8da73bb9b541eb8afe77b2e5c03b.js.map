{"version":3,"sources":["file:///D:/cocosProject/footBallGame/node_modules/engine.io-parser/build/esm/index.js"],"names":["createPacketEncoderStream","TransformStream","transform","packet","controller","encodePacketToBinary","encodedPacket","payloadLength","length","header","Uint8Array","DataView","buffer","setUint8","view","setUint16","setBigUint64","BigInt","data","enqueue","totalLength","chunks","reduce","acc","chunk","concatChunks","size","shift","j","i","slice","createPacketDecoderStream","maxPayload","binaryType","TEXT_DECODER","TextDecoder","state","expectedLength","isBinary","push","headerArray","byteOffset","getUint16","n","getUint32","Math","pow","ERROR_PACKET","decodePacket","decode","encodePacket","SEPARATOR","String","fromCharCode","encodePayload","packets","callback","encodedPackets","Array","count","forEach","join","decodePayload","encodedPayload","split","decodedPacket","type","protocol"],"mappings":"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","sourcesContent":["import { encodePacket, encodePacketToBinary } from \"./encodePacket.js\";\nimport { decodePacket } from \"./decodePacket.js\";\nimport { ERROR_PACKET, } from \"./commons.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, (encodedPacket) => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport function createPacketEncoderStream() {\n    return new TransformStream({\n        transform(packet, controller) {\n            encodePacketToBinary(packet, (encodedPacket) => {\n                const payloadLength = encodedPacket.length;\n                let header;\n                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n                if (payloadLength < 126) {\n                    header = new Uint8Array(1);\n                    new DataView(header.buffer).setUint8(0, payloadLength);\n                }\n                else if (payloadLength < 65536) {\n                    header = new Uint8Array(3);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 126);\n                    view.setUint16(1, payloadLength);\n                }\n                else {\n                    header = new Uint8Array(9);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 127);\n                    view.setBigUint64(1, BigInt(payloadLength));\n                }\n                // first bit indicates whether the payload is plain text (0) or binary (1)\n                if (packet.data && typeof packet.data !== \"string\") {\n                    header[0] |= 0x80;\n                }\n                controller.enqueue(header);\n                controller.enqueue(encodedPacket);\n            });\n        },\n    });\n}\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n        return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n        buffer[i] = chunks[0][j++];\n        if (j === chunks[0].length) {\n            chunks.shift();\n            j = 0;\n        }\n    }\n    if (chunks.length && j < chunks[0].length) {\n        chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n}\nexport function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n        TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* State.READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n        transform(chunk, controller) {\n            chunks.push(chunk);\n            while (true) {\n                if (state === 0 /* State.READ_HEADER */) {\n                    if (totalLength(chunks) < 1) {\n                        break;\n                    }\n                    const header = concatChunks(chunks, 1);\n                    isBinary = (header[0] & 0x80) === 0x80;\n                    expectedLength = header[0] & 0x7f;\n                    if (expectedLength < 126) {\n                        state = 3 /* State.READ_PAYLOAD */;\n                    }\n                    else if (expectedLength === 126) {\n                        state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n                    }\n                    else {\n                        state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n                    }\n                }\n                else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n                    if (totalLength(chunks) < 2) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 2);\n                    expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n                    if (totalLength(chunks) < 8) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 8);\n                    const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n                    const n = view.getUint32(0);\n                    if (n > Math.pow(2, 53 - 32) - 1) {\n                        // the maximum safe integer in JavaScript is 2^53 - 1\n                        controller.enqueue(ERROR_PACKET);\n                        break;\n                    }\n                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else {\n                    if (totalLength(chunks) < expectedLength) {\n                        break;\n                    }\n                    const data = concatChunks(chunks, expectedLength);\n                    controller.enqueue(decodePacket(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n                    state = 0 /* State.READ_HEADER */;\n                }\n                if (expectedLength === 0 || expectedLength > maxPayload) {\n                    controller.enqueue(ERROR_PACKET);\n                    break;\n                }\n            }\n        },\n    });\n}\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload, };\n"]}