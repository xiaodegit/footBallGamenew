{"version":3,"sources":["file:///D:/cocosProject/footBallGame/node_modules/socket.io-client/build/esm/socket.js"],"names":["Socket","PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","constructor","io","nsp","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","disconnected","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","_a","_b","_c","hasOwnProperty","Error","toString","retries","fromQueue","volatile","_addToQueue","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","isConnected","_hasPingExpired","discardPacket","notifyOutgoingListeners","push","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","fn","clearTimeoutFn","withError","emitWithAck","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","hasError","shift","responseArgs","_drainQueue","force","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","_clearAcks","keys","forEach","isBuffered","some","String","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"],"mappings":"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","sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        var _a, _b, _c;\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n        const discardPacket = this.flags.volatile && !isTransportWritable;\n        if (discardPacket) {\n        }\n        else if (isConnected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n"]}