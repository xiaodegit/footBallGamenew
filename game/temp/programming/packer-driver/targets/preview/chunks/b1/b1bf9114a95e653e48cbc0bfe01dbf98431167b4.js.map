{"version":3,"sources":["file:///D:/cocosProject/footBallGame/game/node_modules/engine.io-parser/build/esm/encodePacket.js"],"names":["encodePacketToBinary","packet","callback","data","ArrayBuffer","isView","toBuffer","encodePacket","encoded","TEXT_ENCODER","TextEncoder","encode","PACKET_TYPES","supportsBinary","type","toString","forceBufferConversion","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength"],"mappings":";;;;;AAqBO,WAASA,oBAAT,CAA8BC,MAA9B,EAAsCC,QAAtC,EAAgD;AACnD,QAAID,MAAM,CAACE,IAAP,YAAuBC,WAAvB,IAAsCA,WAAW,CAACC,MAAZ,CAAmBJ,MAAM,CAACE,IAA1B,CAA1C,EAA2E;AACvE,aAAOD,QAAQ,CAACI,QAAQ,CAACL,MAAM,CAACE,IAAR,EAAc,KAAd,CAAT,CAAf;AACH;;AACDI,IAAAA,YAAY,CAACN,MAAD,EAAS,IAAT,EAAgBO,OAAD,IAAa;AACpC,UAAI,CAACC,YAAL,EAAmB;AACf;AACAA,QAAAA,YAAY,GAAG,IAAIC,WAAJ,EAAf;AACH;;AACDR,MAAAA,QAAQ,CAACO,YAAY,CAACE,MAAb,CAAoBH,OAApB,CAAD,CAAR;AACH,KANW,CAAZ;AAOH;;kCAXeR,oB;;;;AArBPY,MAAAA,Y,gBAAAA,Y;;;8BACIL,Y,GAAe,OAAiBM,cAAjB,EAAiCX,QAAjC,KAA8C;AAAA,YAA7C;AAAEY,UAAAA,IAAF;AAAQX,UAAAA;AAAR,SAA6C;;AACtE,YAAIA,IAAI,YAAYC,WAAhB,IAA+BA,WAAW,CAACC,MAAZ,CAAmBF,IAAnB,CAAnC,EAA6D;AACzD,iBAAOD,QAAQ,CAACW,cAAc,GAAGV,IAAH,GAAU,MAAMG,QAAQ,CAACH,IAAD,EAAO,IAAP,CAAR,CAAqBY,QAArB,CAA8B,QAA9B,CAA/B,CAAf;AACH,SAHqE,CAItE;;;AACA,eAAOb,QAAQ,CAACU,YAAY,CAACE,IAAD,CAAZ,IAAsBX,IAAI,IAAI,EAA9B,CAAD,CAAf;AACH,O;;AACKG,MAAAA,Q,GAAW,CAACH,IAAD,EAAOa,qBAAP,KAAiC;AAC9C,YAAIC,MAAM,CAACC,QAAP,CAAgBf,IAAhB,KACCA,IAAI,YAAYgB,UAAhB,IAA8B,CAACH,qBADpC,EAC4D;AACxD,iBAAOb,IAAP;AACH,SAHD,MAIK,IAAIA,IAAI,YAAYC,WAApB,EAAiC;AAClC,iBAAOa,MAAM,CAACG,IAAP,CAAYjB,IAAZ,CAAP;AACH,SAFI,MAGA;AACD,iBAAOc,MAAM,CAACG,IAAP,CAAYjB,IAAI,CAACkB,MAAjB,EAAyBlB,IAAI,CAACmB,UAA9B,EAA0CnB,IAAI,CAACoB,UAA/C,CAAP;AACH;AACJ,O","sourcesContent":["import { PACKET_TYPES } from \"./commons.js\";\nexport const encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n        return callback(supportsBinary ? data : \"b\" + toBuffer(data, true).toString(\"base64\"));\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst toBuffer = (data, forceBufferConversion) => {\n    if (Buffer.isBuffer(data) ||\n        (data instanceof Uint8Array && !forceBufferConversion)) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return Buffer.from(data);\n    }\n    else {\n        return Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    }\n};\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (packet.data instanceof ArrayBuffer || ArrayBuffer.isView(packet.data)) {\n        return callback(toBuffer(packet.data, false));\n    }\n    encodePacket(packet, true, (encoded) => {\n        if (!TEXT_ENCODER) {\n            // lazily created for compatibility with Node.js 10\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\n"]}