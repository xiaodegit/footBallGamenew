{"version":3,"sources":["file:///D:/cocosProject/footBallGame/game/node_modules/socket.io-parser/build/esm/index.js"],"names":["Encoder","Decoder","BinaryReconstructor","isObject","value","Object","prototype","toString","call","Emitter","deconstructPacket","reconstructPacket","isBinary","hasBinary","RESERVED_EVENTS","protocol","PacketType","constructor","replacer","encode","obj","type","EVENT","ACK","encodeAsBinary","BINARY_EVENT","BINARY_ACK","nsp","data","id","encodeAsString","str","attachments","JSON","stringify","deconstruction","pack","packet","buffers","unshift","reviver","add","reconstructor","Error","decodeString","isBinaryEvent","emitReserved","base64","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","parse","e","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","indexOf","destroy","finishedReconstruction","reconPack","binData","push"],"mappings":"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","sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"]}